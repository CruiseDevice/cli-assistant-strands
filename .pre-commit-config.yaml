# ==========================================
# Pre-commit Hooks Configuration
# Security-focused Git hooks
# ==========================================
#
# Installation:
# 1. pip install pre-commit
# 2. pre-commit install
# 3. Test: pre-commit run --all-files
#
# These hooks run automatically before each commit
# ==========================================

repos:
  # ============ SECURITY CHECKS ============

  # Detect private keys and secrets
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v6.0.0
    hooks:
      # Prevent committing private keys
      - id: detect-private-key
        name: 🔑 Detect Private Keys
        description: Checks for presence of private keys

      # Prevent committing AWS credentials
      - id: detect-aws-credentials
        name: 🔐 Detect AWS Credentials
        description: Checks for AWS credentials
        args: ['--allow-missing-credentials']

      # Check for merge conflicts
      - id: check-merge-conflict
        name: 🔀 Check Merge Conflicts
        description: Checks for files with merge conflict strings

      # Check for large files
      - id: check-added-large-files
        name: 📦 Check Large Files
        description: Prevents giant files from being committed
        args: ['--maxkb=1000']  # 1MB limit

  # Advanced secret detection with Gitleaks
  # Note: Requires gitleaks to be installed separately
  # - repo: https://github.com/gitleaks/gitleaks
  #   rev: v8.28.0
  #   hooks:
  #     - id: gitleaks
  #       name: 🕵️ Gitleaks - Secret Scanner
  #       description: Advanced secret and credential scanning

  # Detect secrets with detect-secrets
  - repo: https://github.com/Yelp/detect-secrets
    rev: v1.5.0
    hooks:
      - id: detect-secrets
        name: 🔍 Detect Secrets
        description: Detects secrets in code
        args:
          - '--baseline'
          - '.secrets.baseline'
        exclude: |
          (?x)^(
            \.env\.example|
            \.pre-commit-config\.yaml|
            docs/.*|
            tests/.*\.json
          )$

  # ============ FILE FORMAT CHECKS ============

  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v6.0.0
    hooks:
      # Fix trailing whitespace
      - id: trailing-whitespace
        name: ✂️ Trim Trailing Whitespace
        args: ['--markdown-linebreak-ext=md']

      # Fix end of file
      - id: end-of-file-fixer
        name: 📄 Fix End of Files

      # Check YAML syntax
      - id: check-yaml
        name: 📋 Check YAML
        exclude: 'templates/'

      # Check JSON syntax
      - id: check-json
        name: 🔤 Check JSON
        exclude: |
          (?x)^(
            \.vscode/.*\.json|
            tsconfig\.json
          )$

      # Check TOML syntax
      - id: check-toml
        name: 📝 Check TOML

      # Check XML syntax
      - id: check-xml
        name: 🏷️ Check XML

      # Prevent committing to main/master
      # Commented out for initial setup - uncomment for production use
      # - id: no-commit-to-branch
      #   name: 🚫 Prevent Direct Commits to Main
      #   args: ['--branch', 'main', '--branch', 'master']

      # Check for case conflicts
      - id: check-case-conflict
        name: 📂 Check Case Conflicts

      # Check for symlinks
      - id: check-symlinks
        name: 🔗 Check Symlinks

      # Mixed line endings
      - id: mixed-line-ending
        name: 📏 Check Line Endings
        args: ['--fix=lf']

  # Bandit - Security linter for Python
  - repo: https://github.com/PyCQA/bandit
    rev: 1.8.6
    hooks:
      - id: bandit
        name: 🛡️ Bandit - Security Linter
        args:
          - '-c'
          - 'pyproject.toml'
          - '-r'
          - '.'
        exclude: |
          (?x)^(
            tests/.*|
            venv/.*|
            setup\.py
          )$

  # ============ CUSTOM HOOKS ============

  # Custom security checks
  - repo: local
    hooks:
      # Check for hardcoded credentials patterns
      - id: check-hardcoded-credentials
        name: 🔐 Check Hardcoded Credentials
        entry: python scripts/check_credentials.py
        language: system
        pass_filenames: false
        always_run: true

      # Validate .env.example is up to date
      - id: check-env-example
        name: 📋 Validate .env.example
        entry: python scripts/validate_env_example.py
        language: system
        files: ^\.env\.example$
        pass_filenames: false

      # Verify cost limits are set
      - id: check-cost-limits
        name: 💰 Verify Cost Limits
        entry: python scripts/check_cost_limits.py
        language: system
        files: ^(\.env|config/.*\.yaml)$
        pass_filenames: false


# ==========================================
# NOTES:
# - Run manually: pre-commit run --all-files
# - Update hooks: pre-commit autoupdate
# - Skip hooks: git commit --no-verify (emergency only!)
# - Test specific hook: pre-commit run <hook-id> --all-files
# ==========================================
